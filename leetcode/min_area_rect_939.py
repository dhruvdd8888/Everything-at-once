from collections import defaultdict
def minAreaRect(points) -> int:
    m=2147483647
    n = len(points)
    lx = len(set(x for x, y in points))
    ly = len(set(y for x, y in points))


    dic = defaultdict(list)
    if lx < ly:
        for x, y in points:
            dic[y].append(x)
    else:
        for x, y in points:
            dic[x].append(y)

    pre = {}
    for x in sorted(dic):
        dic[x].sort()
        for i in range(len(dic[x])):
            for j in range(i):
                c, b = dic[x][j], dic[x][i]
                if (c, b) in pre:
                    m = min(m, (x - pre[c, b]) * abs(b - c))
                pre[c, b] = x
    if(m==2147483647):return 0
    return m
x=[[1,10],[1,30],[3,10],[3,30],[2,20]]
# for i in range(10):x.extend(x)
print("ccc")
# x=[[18032,11921],[18032,688],[39817,26702],[21277,11345],[18032,13566],[18913,18479],[39817,5237],[17998,39596],[8304,688],[24822,15542],[38269,2392],[13423,1587],[7369,22968],[38269,34875],[30013,24936],[23191,1571],[18913,22968],[24822,39596],[7369,18479],[39817,15542],[23191,11345],[17998,24936],[20670,39595],[24087,1571],[7369,688],[7369,11345],[8304,13566],[21277,26702],[23191,11921],[28859,25021],[35678,2392],[24822,5237],[10606,2392],[35678,34875],[23191,30480],[32990,5237],[13423,12404],[7369,5237],[18913,26702],[28859,30480],[20670,11345],[18913,1587],[39817,13566],[23191,18479],[27140,1571],[35678,13566],[32547,15542],[7369,1571],[38269,25021],[32547,22968],[38269,17935],[21277,3516],[18913,39596],[20670,5237],[24087,11345],[24822,34875],[39817,1571],[23191,24936],[24822,688],[35678,25021],[18032,34875],[7369,39595],[28859,24936],[13423,11921],[23191,22968],[32547,34875],[13423,11345],[30013,5237],[18913,1571],[35678,18479],[17998,688],[17998,11921],[18032,3516],[23191,26702],[21277,1571],[18913,12404],[18913,25021],[38269,30480],[28859,688],[28859,12404],[17998,30480],[28859,2392],[24822,11921],[8304,24936],[24822,17935],[24822,24936],[35678,15542],[20670,1571],[23191,17935],[18032,18479],[24087,39595],[24087,39596],[13423,18479],[35678,688],[32547,18479],[8304,39595],[7369,34875],[24087,30480],[38269,22968],[32990,26702],[10606,1587],[18032,39596],[38269,39595],[32547,688],[32547,3516],[24087,18479],[10606,26702],[39817,22968],[13423,30480],[32990,22968],[23191,13566],[30013,11921],[18032,30480],[10606,688],[7369,12404],[21277,13566],[13423,13566],[24087,25021],[24087,24936],[32990,24936],[39817,688],[27140,2392],[27140,26702],[8304,5237],[13423,26702],[18032,1571],[17998,39595],[13423,2392],[38269,1587],[32547,12404],[20670,24936],[20670,25021],[18913,11345],[7369,30480],[23191,5237],[32990,30480],[18032,17935],[27140,22968],[24822,39595],[27140,30480],[21277,39595],[24087,2392],[30013,688],[10606,11345],[38269,18479],[35678,1571],[38269,12404],[28859,39596],[38269,39596],[27140,688],[32990,11921],[24087,17935],[30013,22968],[38269,1571],[23191,39596],[8304,2392],[18913,30480],[27140,25021],[20670,39596],[24822,2392],[21277,24936],[35678,39596],[39817,3516],[24822,30480],[24822,1587],[32990,3516],[8304,30480],[35678,1587],[18913,15542],[8304,1587],[30013,39595],[35678,22968],[38269,688],[8304,39596],[10606,39595],[8304,26702],[18032,2392],[32547,1571],[7369,17935],[30013,12404],[23191,25021],[7369,15542],[21277,39596],[10606,24936],[32547,24936],[7369,26702],[32990,11345],[39817,11345],[28859,13566],[21277,34875],[18032,26702],[17998,11345],[20670,17935],[28859,26702],[18913,5237],[24087,3516],[21277,18479],[13423,15542],[18913,688],[35678,39595],[24822,26702],[24087,5237],[32547,1587],[23191,34875],[38269,26702],[30013,18479],[27140,13566],[24087,34875],[24822,12404],[32547,39596],[24087,11921],[32990,1571],[32990,12404],[13423,5237],[27140,11345],[35678,11345],[7369,1587],[20670,2392],[10606,34875],[18032,15542],[35678,11921],[23191,39595],[30013,3516],[17998,12404],[28859,1571],[20670,30480],[35678,5237],[39817,18479],[30013,13566],[20670,12404],[30013,1571],[32547,13566],[10606,1571],[39817,30480],[39817,39595],[18032,5237],[18032,24936],[32990,13566],[32990,17935],[20670,15542],[10606,25021],[10606,11921],[13423,22968],[38269,24936],[17998,13566],[28859,3516],[20670,26702],[21277,5237],[30013,39596],[28859,11345],[13423,24936],[7369,11921],[28859,17935],[10606,18479],[39817,2392],[24087,22968],[24087,15542],[30013,30480],[24822,13566]]
# x=[[18218,15359],[18230,8130],[26327,6032],[6217,12207],[4546,26783],[15835,37711],[18884,26957],[17211,24793],[36149,11988],[12057,441],[15835,5201],[19597,6032],[36194,24793],[18884,25848],[17211,11988],[4501,4332],[36194,25284],[12057,20188],[5672,24793],[12882,18968],[34692,35910],[26342,34109],[18230,18806],[39394,441],[26342,20188],[18218,26957],[35094,16186],[6217,20188],[17211,26957],[12882,26957],[17211,8130],[4546,26957],[17211,25284],[17211,18806],[39394,29352],[26327,4332],[12882,16186],[35094,14718],[32847,6032],[36068,14718],[5672,12207],[26342,18968],[36149,5102],[29015,14718],[18884,35910],[19597,26957],[32847,24793],[4501,18806],[12882,25848],[15835,4332],[32847,26783],[12882,5201],[4546,4332],[4501,12207],[34692,16186],[5672,37711],[36149,12207],[18218,11988],[18230,34109],[36194,8130],[17211,15359],[36068,15359],[18884,11988],[6217,35910],[34692,15359],[4501,25848],[19597,18806],[35094,11988],[18230,441],[18218,35910],[4501,16186],[6217,8130],[19597,24793],[39394,14718],[32847,15359],[18230,4332],[26327,24793],[32847,35910],[18884,441],[18884,18806],[26327,16186],[12882,26783],[17211,26783],[18884,15359],[15835,34109],[26327,25848],[18884,37711],[18230,11988],[29015,6032],[32847,26957],[17211,6032],[26342,26957],[36149,24793],[15835,18968],[36194,29352],[32847,14718],[4501,34109],[15835,35910],[18884,6032],[12057,16186],[35094,25284],[19597,20188],[34692,24793],[39394,24793],[18218,16186],[12882,15359],[5672,35910],[15835,8130],[26327,18968],[18218,25284],[36149,18968],[36194,16186],[36194,6032],[15835,11988],[5672,8130],[18884,29352],[18884,25284],[26327,25284],[15835,24793],[19597,16186],[12057,4332],[18230,25284],[32847,29352],[6217,5201],[18218,14718],[12057,8130],[29015,35910],[36149,25848],[35094,8130],[26327,14718],[36149,37711],[21750,6032],[29015,26783],[21750,16186],[12882,8130],[15835,441],[26342,26783],[4546,11988],[36194,12207],[39394,26957],[36149,26783],[15835,25284],[19597,34109],[39394,8130],[12057,18806],[6217,18968],[5672,25284],[18230,20188],[6217,26957],[39394,35910],[21750,26957],[12882,24793],[29015,20188],[18218,5102],[4546,441],[36194,14718],[18884,5201],[36149,34109],[18218,441],[29015,8130],[29015,5102],[18230,29352],[12057,37711],[39394,12207],[36068,441],[29015,26957],[18230,5201],[12882,20188],[32847,4332],[4546,6032],[12057,6032],[36194,26783],[36194,20188],[36068,29352],[36194,15359],[18218,6032],[35094,5201],[19597,37711],[12057,24793],[5672,26783],[35094,5102],[18218,12207],[6217,25284],[36194,25848],[34692,25848],[39394,5102],[17211,20188],[4501,26957],[39394,20188],[18218,29352],[21750,441],[4501,37711],[17211,5102],[29015,5201],[36149,4332],[6217,18806],[5672,15359],[4501,14718],[12882,37711],[4501,26783],[34692,441],[19597,29352],[4546,8130],[26327,35910],[26342,12207],[18218,20188],[18230,14718],[21750,8130],[12057,11988],[6217,11988],[17211,12207],[19597,25284],[15835,26783],[4501,29352],[26327,11988],[39394,18806],[39394,4332],[36068,25284],[6217,25848],[19597,15359],[18884,14718],[26342,5102],[36068,35910],[36149,14718],[12882,18806],[6217,5102],[18218,5201],[12057,25284],[34692,29352],[21750,4332],[21750,5201],[17211,441],[18218,4332],[18884,16186],[12882,6032],[18230,26783],[17211,14718],[36068,8130],[19597,11988],[4546,34109],[35094,15359],[36194,5201],[18884,34109],[39394,34109],[6217,441],[18230,25848],[12882,441],[12057,26783],[32847,11988],[35094,12207],[6217,26783],[36068,5102],[19597,35910],[12882,34109],[4546,35910],[29015,12207],[26342,4332],[4546,12207],[4546,18968],[21750,15359],[26327,26783],[17211,16186],[12057,34109],[32847,18806],[18230,18968],[32847,18968],[26327,15359],[12057,15359],[12882,12207],[4546,29352],[26327,18806],[29015,34109],[12057,35910],[18884,5102],[36149,29352],[21750,29352],[34692,18968],[32847,25284],[15835,15359],[21750,25848],[29015,441],[15835,18806],[4546,16186],[26342,14718],[21750,11988],[18230,24793],[35094,26957],[19597,5102],[18230,35910],[18230,6032],[29015,11988],[4546,37711],[36194,18806],[18218,24793],[35094,35910],[4546,5201],[39394,6032],[32847,12207],[35094,441],[18218,26783],[36149,441],[12882,5102],[36068,20188],[5672,26957],[4546,20188],[17211,18968],[34692,5102],[17211,35910],[18230,5102],[6217,34109],[32847,34109],[36194,441],[5672,20188],[18218,34109],[34692,25284],[36149,26957],[36068,18806]]
x=[[234,23749],[6440,19288],[23316,24707],[6440,35278],[21564,19288],[39843,6228],[234,35212],[6886,5173],[36268,19288],[23620,15674],[6886,3682],[23620,29260],[21246,29887],[32527,35278],[21246,5656],[18511,2266],[37911,19487],[18511,29260],[21246,27580],[37911,2266],[21564,6228],[36268,2266],[1152,5656],[36062,24957],[24992,29260],[32527,21340],[797,35212],[6886,19288],[31600,35278],[797,23749],[18511,15674],[24992,30876],[23620,24957],[39843,3682],[21564,30876],[234,5988],[36062,35278],[13193,3682],[13193,5173],[234,2266],[9446,19487],[39843,31362],[21564,14281],[39843,5173],[37911,5173],[9446,5173],[1152,29887],[13193,19487],[36268,30876],[797,5988],[39843,15674],[1152,21340],[9446,24707],[797,27580],[32527,5656],[234,35278],[23316,5656],[22203,5656],[36268,29260],[32527,30876],[23316,30876],[33520,2266],[6440,21340],[36062,5988],[21564,29260],[6440,23749],[6440,24707],[1152,5173],[32527,3682],[23316,35278],[33520,24707],[24992,19288],[22203,35212],[32527,19487],[6886,15674],[6440,6228],[36268,29887],[1152,23749],[24992,19487],[23316,5988],[24992,31362],[234,27580],[39843,24707],[36268,23749],[32527,19288],[18511,31362],[37911,21340],[37911,19288],[36268,36620],[31600,21340],[21564,5173],[18511,24957],[32527,5988],[32527,14281],[6440,24957],[23620,29887],[36062,19288],[6886,5656],[36268,31362],[32527,5173],[39843,29260],[1152,15674],[33520,19487],[22203,5173],[32527,24707],[13193,29887],[6440,5173],[31600,3682],[23620,35278],[21246,21340],[23316,36620],[9446,29260],[18511,35278],[31600,27580],[6440,15674],[37911,29887],[23316,2266],[23316,29260],[6886,24957],[24992,6228],[37911,30876],[39843,5988],[31600,30876],[18511,21340],[39843,29887],[31600,2266],[13193,5988],[22203,2266],[36268,14281],[234,21340],[13193,36620],[24992,21340],[234,29887],[6886,5988],[24992,29887],[22203,35278],[31600,24707],[33520,14281],[21246,24957],[18511,27580],[21246,30876],[234,6228],[33520,6228],[23620,31362],[33520,21340],[22203,21340],[13193,6228],[32527,36620],[9446,14281],[36062,15674],[36268,35278],[31600,14281],[6440,36620],[797,5173],[22203,19288],[37911,14281],[37911,27580],[39843,14281],[13193,35212],[23620,3682],[22203,31362],[24992,24957],[13193,29260],[31600,36620],[23620,21340],[18511,3682],[6440,29260],[23316,5173],[21246,14281],[13193,24707],[33520,3682],[13193,27580],[1152,35212],[36062,27580],[23620,35212],[797,31362],[6440,19487],[234,15674],[21246,5988],[39843,35212],[23620,6228],[1152,24957],[36268,24707],[37911,5988],[21246,36620],[21564,19487],[18511,19288],[9446,24957],[23620,5656],[9446,30876],[32527,29887],[24992,35212],[797,29260],[23316,14281],[18511,14281],[21564,2266],[6886,23749],[31600,29260],[6886,2266],[13193,35278],[33520,5988],[21564,24957],[797,29887],[797,21340],[33520,31362],[22203,23749],[31600,5173],[6440,27580],[37911,36620],[22203,29887],[22203,3682],[36268,21340],[1152,3682],[32527,35212],[23316,24957],[18511,5656],[1152,2266],[36062,14281],[13193,14281],[22203,24707],[23620,23749],[797,36620],[23316,21340],[32527,2266],[23620,24707],[24992,5988],[797,35278],[6886,36620],[13193,5656],[36268,27580],[6886,35278],[797,5656],[36062,24707],[23316,6228],[18511,19487],[1152,36620],[32527,27580],[21564,31362],[23620,36620],[31600,15674],[21246,23749],[37911,29260],[21564,15674],[9446,15674],[21246,35212],[23620,27580],[24992,5173],[6440,31362],[33520,29887],[21246,35278],[21246,19487],[24992,35278],[1152,19288],[9446,19288],[24992,36620],[6440,14281],[36062,30876],[32527,24957],[39843,21340],[31600,5656],[1152,31362],[33520,29260]]
# print(len(x))
print(minAreaRect(x))



exit()






def minAreaRect(self, points):
    n = len(points)
    nx = len(set(x for x, y in points))
    ny = len(set(y for x, y in points))
    if nx == n or ny == n:
        return 0

    # p = collections.defaultdict(list)
    p={}
    if nx > ny:
        for x, y in points:
            p[x].append(y)
    else:
        for x, y in points:
            p[y].append(x)

    pre = {}
    res = float('inf')
    for x in sorted(p):
        p[x].sort()
        for i in range(len(p[x])):
            for j in range(i):
                c, b = p[x][j], p[x][i]
                if (c, b) in pre:
                    res = min(res, (x - pre[c, b]) * abs(b - c))
                pre[c, b] = x
    return res if res < float('inf') else 0